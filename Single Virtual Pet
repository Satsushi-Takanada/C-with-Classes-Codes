#include <iostream>
#include <algorithm>
#include <string>
#include <windows.h>

using namespace std;

struct user {
	int feed, msleep, bathe, play;
	int food, sleep, smell, happy;
	string name, action;
};

int feeds(int fed, int rando, string action) {

	if (action == "FEED") {

		fed = fed + rando;

		if (fed >= 50) {
			fed = 50;
		}
	}

	else {
		fed = fed - rando;
	}
	
	return fed;
}

int sleeps(int sleeps, int rando, string action) {

	if (action == "SLEEP") {

		sleeps = sleeps + rando;

		if (sleeps >= 50) {
			sleeps = 50;
		}
	}

	else {
		sleeps = sleeps - rando;
	}
	
	return sleeps;
}

int bathes(int bathes, int rando, string action) {

	if (action == "BATHE") {

		bathes = bathes + rando;

		if (bathes >= 50) {
			bathes = 50;
		}
	}

	else {
		bathes = bathes - rando;
	}

	return bathes;
}

int plays(int plays, int rando, string action) {

	if (action == "PLAY") {

		plays = plays + rando;

		if (plays >= 50) {
			plays = 50;
		}
	}

	else {
		plays = plays - rando;
	}

	return plays;
}

int main() {
	srand(time(0));
	user pet;

	pet.food = 40;
	pet.sleep = 40;
	pet.smell = 40;
	pet.happy = 40;

	for (int i = 1; i <= 76; i++) {
		cout << "#";
		if (i == 76) {
			cout << "\n";
			for (int j = 0; j <= 25; j++) {
				cout << " ";
			}
			cout << "Welcome to Pet Simulator!";
			for (int j = 0; j <= 25; j++) {
				cout << " ";
				if (j == 25) {
					cout << "\n";
					for (int i = 1; i <= 76; i++) {
						cout << "#";
					}
				}
			}
		}
	}

	cout << "\nStart?(Y/N)\n";
	getline(cin, pet.action);

	transform(pet.action.begin(), pet.action.end(), pet.action.begin(), toupper);

	if (pet.action == "Y") {
		goto VirtualPet;
	}
	else {
		exit(0);
	}

VirtualPet: cout << "\nEnter name for pet:\n";
	getline(cin, pet.name);

	transform(pet.name.begin(), pet.name.end(), pet.name.begin(), toupper);

GAME: system("CLS");

	int rando1 = 1 + rand() % 10;
	int rando2 = 1 + rand() % 10;
	int rando3 = 1 + rand() % 10;
	int rando4 = 1 + rand() % 10;

	if (pet.food <= 0 || pet.sleep <= 0 || pet.smell <= 0 || pet.happy <= 0) {
		system("CLS");
		cout << "GAMEOVER!";
		exit(0);
	}

	cout << "*Use EXIT to leave the game.*\n";
	cout << "*Use FEED for hunger, SLEEP for energy, BATHE for smell, and PLAY for happiness.*\n\n";
	cout << "Pet: " << pet.name;

	cout << "\n\nHunger: " << pet.food << "\nEnergy: " << pet.sleep;
	cout << "\nSmell: " << pet.smell << "\nHappiness: " << pet.happy;

QUESTION: cout << "\n\nAction?\n";
	cin >> pet.action;

	transform(pet.action.begin(), pet.action.end(), pet.action.begin(), toupper);

	if (pet.action == "FEED") {
		pet.food = feeds(pet.food, rando1, pet.action);
		pet.sleep = sleeps(pet.sleep, rando2, pet.action);
		pet.smell = bathes(pet.smell, rando3, pet.action);
		pet.happy = plays(pet.happy, rando4, pet.action);
		goto GAME;
	}

	else if (pet.action == "SLEEP") {
		pet.food = feeds(pet.food, rando1, pet.action);
		pet.sleep = sleeps(pet.sleep, rando2, pet.action);
		pet.smell = bathes(pet.smell, rando3, pet.action);
		pet.happy = plays(pet.happy, rando4, pet.action);
		goto GAME;
	}

	else if (pet.action == "BATHE") {
		pet.food = feeds(pet.food, rando1, pet.action);
		pet.sleep = sleeps(pet.sleep, rando2, pet.action);
		pet.smell = bathes(pet.smell, rando3, pet.action);
		pet.happy = plays(pet.happy, rando4, pet.action);
		goto GAME;
	}

	else if (pet.action == "PLAY") {
		pet.food = feeds(pet.food, rando1, pet.action);
		pet.sleep = sleeps(pet.sleep, rando2, pet.action);
		pet.smell = bathes(pet.smell, rando3, pet.action);
		pet.happy = plays(pet.happy, rando4, pet.action);
		goto GAME;
	}
	else if (pet.action == "EXIT") {
		exit(0);
	}

	else {
		goto QUESTION;
	}
}
