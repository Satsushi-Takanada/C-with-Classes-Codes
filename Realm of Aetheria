#include <iostream>
#include <algorithm>
#include <string>
#include <windows.h>

using namespace std;

struct main_character {
	double physical_damage, magical_damage ,health;
	string name, role, action;
};

/*Health Function*/
double health(string player_class) {
	double health;
	if (player_class == "WARRIOR") {
		health = 200;
		return health;
	}

	if (player_class == "SORCERER") {
		health = 120;
		return health;
	}

	if (player_class == "ROGUE") {
		health = 180;
		return health;
	}

	if (player_class == "RANGER") {
		health = 150;
		return health;
	}
}

/*Physical Damage Function*/
double physical_damage(string player_class) {
	double phy_dmg;
	if (player_class == "WARRIOR") {
		phy_dmg = 25;
		return phy_dmg;
	}

	if (player_class == "SORCERER") {
		phy_dmg = 14;
		return phy_dmg;
	}

	if (player_class == "ROGUE") {
		phy_dmg = 20;
		return phy_dmg;
	}

	if (player_class == "RANGER") {
		phy_dmg = 22;
		return phy_dmg;
	}
}

/*Magical Damage Function*/
double magical_damage(string player_class) {
	double mgc_dmg;
	if (player_class == "WARRIOR") {
		mgc_dmg = 10;
		return mgc_dmg;
	}

	if (player_class == "SORCERER") {
		mgc_dmg = 27;
		return mgc_dmg;
	}

	if (player_class == "ROGUE") {
		mgc_dmg = 23;
		return mgc_dmg;
	}

	if (player_class == "RANGER") {
		mgc_dmg = 16;
		return mgc_dmg;
	}
}

/*Dungeon Exploration*/
double Dungeon(double health, double phy_dmg, double mgc_dmg) {
	srand(time(NULL));
	
	string action;

DUNGEON:
	double enemy_health = 150;
	double enemy_dmg = 30;
	int exploreluck = 1 + rand() % 3;

	cout << "*Use EXPLORE and use EXIT to leave the dungeon*\n\n";
	cout << "Health: " << health << "\nPhysical Damage: " << phy_dmg << "\nMagical Damage: " << mgc_dmg << "\n\n";
EXPLOREQUESTION: getline(cin, action);

	transform(action.begin(), action.end(), action.begin(), toupper);

	if (action == "EXPLORE") {
		switch (exploreluck) {
		case 1:
			system("CLS");
			cout << "An Enemy!\n" << "Will you Fight? (Yes/No)\n\n";
			FIGHTQUESTION: getline(cin, action);

			transform(action.begin(), action.end(), action.begin(), toupper);

			if (action == "YES") {
				do {
					if (enemy_health <= 0) {
						system("CLS");
						Sleep(1000);
						cout << "You Won!";
						Sleep(1000);
						system("CLS");
						goto DUNGEON;
					}

					if (health <= 0) {
						system("CLS");
						cout << "GAMEOVER!";
						exit(0);
					}

					system("CLS");
					cout << "*Use PHY for Physical Damage and Use MGC for Magical Damage*\n\n";
					cout << "Health: " << health << "\nMonster Health: " << enemy_health;
					cout << "\n\nUse?\n\n";
					getline(cin, action);

					transform(action.begin(), action.end(), action.begin(), toupper);

					int luck = 1 + rand() % 3;

					switch (luck) {
					case 1:
						if (action == "PHY") {
							system("CLS");
							Sleep(1000);
							cout << "You damaged him using your weapon!";
							enemy_health = enemy_health - phy_dmg;
							Sleep(1000);
						}

						if (action == "MGC") {
							system("CLS");
							Sleep(1000);
							cout << "You damaged him using your magic!";
							enemy_health = enemy_health - mgc_dmg;
							Sleep(1000);
						}
						break;
						
					case 2:
						if (action == "PHY") {
							system("CLS");
							Sleep(1000);
							cout << "You damaged him using your weapon with critical damage!";
							enemy_health = enemy_health - (phy_dmg + phy_dmg);
							Sleep(1000);
						}

						if (action == "MGC") {
							system("CLS");
							Sleep(1000);
							cout << "You damaged him using your magic with critical damage!";
							enemy_health = enemy_health - (mgc_dmg + mgc_dmg);
							Sleep(1000);
						}
						break;

					case 3:
						system("CLS");
						Sleep(1000);
						cout << "You missed!";
						health = health - enemy_dmg;
						Sleep(1000);
						break;
					}
				} while (health > 0 || enemy_health > 0);
			}

			else if (action == "NO") {
				goto DUNGEON;
			}

			else {
				goto FIGHTQUESTION;
			}
			break;

		case 2:
			system("CLS");
			Sleep(1000);
			cout << "You found nothing... Unlucky...";
			Sleep(1000);
			system("CLS");
			goto DUNGEON;
			break;

		case 3:
			system("CLS");
			Sleep(1000);
			cout << "Lucky!! You found Treasure!!";
			Sleep(1000);
			system("CLS");
			goto DUNGEON;
			break;
		}
	}

	else if (action == "EXIT") {
		return health;
	}
	
	else {
		goto EXPLOREQUESTION;
	}
}

/*Tavern Rest*/
double Rest(string player_class, double health) {
	if (player_class >= "WARRIOR") {
		if (health < 200) {
			health = health + 50;
			if (health >= 200) {
				health = 200;
			}
		}
	}

	else if (player_class == "SORCERER") {
		if (health < 120) {
			health = health + 50;
			if (health >= 120) {
				health = 120;
			}
		}
	}

	else if (player_class == "ROGUE") {
		if (health < 180) {
			health = health + 50;
			if (health >= 180) {
				health = 180;
			}
		}
	}

	else if (player_class == "RANGER") {
		if (health < 150) {
			health = health + 50;
				if (health >= 150) {
					health = 150;
				}
		}
	}

	system("CLS");
	Sleep(1000);
	cout << "You Rested";
	Sleep(1000);

	return health;
}

int main() {
	main_character player;

	for (int i = 1; i <= 70; i++) {
		cout << "#";
		if (i == 70) {
			cout << "\n";
			for (int j = 0; j <= 25; j++) {
				cout << " ";
			}
			cout << "Realm of Aetheria";
			for (int j = 0; j <= 25; j++) {
				cout << " ";
				if (j == 25) {
					cout << "\n";
					for (int i = 1; i <= 70; i++) {
						cout << "#";
					}
				}
			}
		}
	}

	/*Customization Character Start*/
	cout << "\nPress Enter\n";
	getline(cin, player.action);

	system("CLS");

	cout << "Enter a name Adventurer: ";
	getline(cin, player.name);

	transform(player.name.begin(), player.name.end(), player.name.begin(), toupper);

	system("CLS");
	cout << "Name: " << player.name;
	cout << "\n\nPick a class:\n\n";
	cout << "Warrior\n" << "Sorcerer\n" << "Rogue\n" << "Ranger\n\n";
	ROLEQUESTION: getline(cin, player.role);

	transform(player.role.begin(), player.role.end(), player.role.begin(), toupper);

	if (player.role == "WARRIOR") {
		player.health = health(player.role);
		player.physical_damage = physical_damage(player.role);
		player.magical_damage = magical_damage(player.role);
	}

	else if (player.role == "SORCERER") {
		player.health = health(player.role);
		player.physical_damage = physical_damage(player.role);
		player.magical_damage = magical_damage(player.role);
	}

	else if (player.role == "ROGUE") {
		player.health = health(player.role);
		player.physical_damage = physical_damage(player.role);
		player.magical_damage = magical_damage(player.role);
	}

	else if (player.role == "RANGER") {
		player.health = health(player.role);
		player.physical_damage = physical_damage(player.role);
		player.magical_damage = magical_damage(player.role);
	}

	else {
		goto ROLEQUESTION;
	}
	/*Customization Character End*/

	system("CLS");
	Sleep(1000);
	cout << "Loading...";
	Sleep(1000);

	/*Game Start*/
	GAME:
		system("CLS");

		cout << "*Use DUNGEON and REST*\n" << "*Use EXIT to leave the game*\n\n";
		cout << "Name: " << player.name;
		cout << "\nClass: " << player.role;
		cout << "\n\nHealth: " << player.health << "\nPhysical Damage: " << player.physical_damage << "\nMagical Damage: " << player.magical_damage;

		cout << "\n\nWelcome " << player.name << " to Sword and Stein Tavern!\n" << "What will you do?\n\n";
		cout << "Enter Dungeon\n" << "Rest at Tavern\n\n";
	ACTIONQUESTION: getline(cin, player.action);

		transform(player.action.begin(), player.action.end(), player.action.begin(), toupper);

		if (player.action == "DUNGEON") {
			system("CLS");
			player.health = Dungeon(player.health, player.physical_damage, player.magical_damage);
			goto GAME;
		}

		else if (player.action == "REST") {
			player.health = Rest(player.role, player.health);
			goto GAME;
		}

		else if (player.action == "EXIT") {
			system("CLS");
			cout << "Exiting...";
			exit(0);
		}

		else {
			goto ACTIONQUESTION;
		}
		/*Game End*/
}
